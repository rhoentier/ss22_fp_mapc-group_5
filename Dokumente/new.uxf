<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="15.0.0">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>580</x>
      <y>160</y>
      <w>220</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>&lt;&lt;abstract&gt;&gt;
INextTask
--
FulfillConditions() : Boolean
Createplan() : void
IsTaskFulfilled() : Boolean
SubPlans() : List&lt;NextPlan&gt;()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>70</x>
      <y>310</y>
      <w>220</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>NextPlanDispenser
--
FulfillConditions() : Boolean
Createplan() : void
IsTaskFulfilled() : Boolean
SubPlans : List&lt;NextPlan&gt;()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>120</x>
      <y>450</y>
      <w>220</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>NextPlanDispenser
--
FulfillConditions() : Boolean
  	&gt; Dispenser bekannt?
Createplan() : void
	&gt; Weg zu den Dispenser
IsTaskFulfilled() : Boolean
	&gt; Dispenser gefunden?
SubPlans : List&lt;NextPlan&gt;()
	&gt; NextExploreMap(dispenser)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>450</x>
      <y>480</y>
      <w>220</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>NextExploreMap(Ding)
--
FulfillConditions() : Boolean
	&gt; keine.
Createplan() : void
	&gt; Weg zum Ding, welches gefunden werden soll
IsTaskFulfilled() : Boolean
	&gt; Ding gefunden
SubPlans : List&lt;NextPlan&gt;()
	&gt; Leer</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>400</x>
      <y>340</y>
      <w>220</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>NextExploreMap
--
FulfillConditions() : Boolean
Createplan() : void
IsTaskFulfilled() : Boolean
SubPlans : List&lt;NextPlan&gt;()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>490</x>
      <y>250</y>
      <w>160</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;implements&gt;&gt;</panel_attributes>
    <additional_attributes>90.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>170</x>
      <y>210</y>
      <w>430</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;implements&gt;&gt;</panel_attributes>
    <additional_attributes>410.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>490</x>
      <y>450</y>
      <w>140</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>genaueres Beispiel</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>170</x>
      <y>420</y>
      <w>140</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>genaueres Beispiel</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>870</x>
      <y>20</y>
      <w>220</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>NextPlanGoalZone
--
FulfillConditions() : Boolean
Createplan() : void
IsTaskFulfilled() : Boolean
SubPlans : List&lt;NextPlan&gt;()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1000</x>
      <y>160</y>
      <w>220</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>NextPlanRoleZone
--
FulfillConditions() : Boolean
Createplan() : void
IsTaskFulfilled() : Boolean
SubPlans : List&lt;NextPlan&gt;()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1000</x>
      <y>310</y>
      <w>220</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>NextPlanRandomPoint
--
FulfillConditions() : Boolean
Createplan() : void
IsTaskFulfilled() : Boolean
SubPlans : List&lt;NextPlan&gt;()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>240</x>
      <y>80</y>
      <w>220</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>NextPlanTask
--
FulfillConditions() : Boolean
Createplan() : void
IsTaskFulfilled() : Boolean
SubPlans : List&lt;NextPlan&gt;()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>450</x>
      <y>120</y>
      <w>150</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;implements&gt;&gt;</panel_attributes>
    <additional_attributes>130.0;40.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>750</x>
      <y>60</y>
      <w>140</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;implements&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;100.0;120.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>790</x>
      <y>180</y>
      <w>230</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;implements&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;20.0;210.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>790</x>
      <y>230</y>
      <w>230</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;implements&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;10.0;210.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>760</x>
      <y>460</y>
      <w>540</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>Idee:
Die abstrakte Klasse / Interface hat alle Methonden, die wir für alle Pläne brauchen. 
Durch das müssen die Pläne alle die gleichen Bedingungen erfüllen.

Jeder Task braucht eine andere Verarbeitung von von Schritten 
und eine andere Liste an Subtasks.
Somit können alle Tasks gleich verarbeitet oder behandelt werden und jeder
Agent kann sich seinen eigenen Taskbaum aufbauen.

Der NextPlanDispenser würde sich zb den Weg zum Dispenser freischaufeln, 
wenn er ihn aber nicht kennt, also die Vorbedingung nicht erfüllt ist, würde er die 
Subtasks abarbeiten (NextExploreMap)
</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
